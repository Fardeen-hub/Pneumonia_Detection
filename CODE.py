# -*- coding: utf-8 -*-
"""Untitled46.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17X1Vl1HLgvwDAkDGmaEP3pHnl7oIOmfM

# ***Setup and Dataset Download***
"""

# STEP 1: Install Required Libraries
!pip install kagglehub

# STEP 2: Import Libraries
import kagglehub
import os
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# STEP 3: Download Dataset from KaggleHub
path = kagglehub.dataset_download("paultimothymooney/chest-xray-pneumonia")
print("✅ Dataset Path:", path)

# STEP 4: Define Directory Paths
train_dir = os.path.join(path, "chest_xray/train")
val_dir = os.path.join(path, "chest_xray/val")
test_dir = os.path.join(path, "chest_xray/test")

# STEP 5: Image Preprocessing (Rescale + Resize)
IMG_SIZE = (150, 150)  # You can change to (224, 224) for higher quality
BATCH_SIZE = 32

datagen = ImageDataGenerator(rescale=1. / 255)

train_gen = datagen.flow_from_directory(
    train_dir, target_size=IMG_SIZE, batch_size=BATCH_SIZE, class_mode='binary')

val_gen = datagen.flow_from_directory(
    val_dir, target_size=IMG_SIZE, batch_size=BATCH_SIZE, class_mode='binary')

test_gen = datagen.flow_from_directory(
    test_dir, target_size=IMG_SIZE, batch_size=BATCH_SIZE, class_mode='binary')

print("✅ Image preprocessing completed and generators are ready!")

"""# ***EfficientNetB0 Code:***"""

from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Build EfficientNetB0 model
base_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(150, 150, 3))
base_model.trainable = False  # Freeze pre-trained layers

model_efficient = Sequential([
    base_model,
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification
])

model_efficient.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history_efficient = model_efficient.fit(train_gen, validation_data=val_gen, epochs=10)

# Evaluate on test data
loss, acc = model_efficient.evaluate(test_gen)
print(f"✅ EfficientNetB0 Test Accuracy: {acc:.4f}")

# Accuracy graph
plt.figure(figsize=(8, 5))
plt.plot(history_efficient.history['accuracy'], label='Train Accuracy')
plt.plot(history_efficient.history['val_accuracy'], label='Validation Accuracy')
plt.title('EfficientNetB0 Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# Save model
model_efficient.save("efficientnetb0_pneumonia_model.h5")

"""# ***DenseNet121***"""

from tensorflow.keras.applications import DenseNet121
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Build DenseNet121 model
base_model = DenseNet121(weights='imagenet', include_top=False, input_shape=(150, 150, 3))
base_model.trainable = False  # Freeze pre-trained layers

model_densenet = Sequential([
    base_model,
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification
])

model_densenet.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history_densenet = model_densenet.fit(train_gen, validation_data=val_gen, epochs=10)

# Evaluate on test data
loss, acc = model_densenet.evaluate(test_gen)
print(f"✅ DenseNet121 Test Accuracy: {acc:.4f}")

# Accuracy graph
plt.figure(figsize=(8, 5))
plt.plot(history_densenet.history['accuracy'], label='Train Accuracy')
plt.plot(history_densenet.history['val_accuracy'], label='Validation Accuracy')
plt.title('DenseNet121 Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# Save model
model_densenet.save("densenet121_pneumonia_model.h5")

"""# ***Xception***"""

from tensorflow.keras.applications import Xception
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Build Xception model
base_model = Xception(weights='imagenet', include_top=False, input_shape=(150, 150, 3))
base_model.trainable = False  # Freeze pretrained layers

model_xception = Sequential([
    base_model,
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification
])

model_xception.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history_xception = model_xception.fit(train_gen, validation_data=val_gen, epochs=10)

# Evaluate on test data
loss, acc = model_xception.evaluate(test_gen)
print(f"✅ Xception Test Accuracy: {acc:.4f}")

# Accuracy graph
plt.figure(figsize=(8, 5))
plt.plot(history_xception.history['accuracy'], label='Train Accuracy')
plt.plot(history_xception.history['val_accuracy'], label='Validation Accuracy')
plt.title('Xception Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# Save model
model_xception.save("xception_pneumonia_model.h5")

"""# Plot All Three in One ***Graph***"""

# Combined Accuracy Comparison Plot
plt.figure(figsize=(10, 6))

# Plot each model's accuracy
plt.plot(history_efficient.history['val_accuracy'], label='EfficientNetB0', linestyle='-', marker='o')
plt.plot(history_densenet.history['val_accuracy'], label='DenseNet121', linestyle='--', marker='s')
plt.plot(history_xception.history['val_accuracy'], label='Xception', linestyle='-.', marker='^')

# Customize the plot
plt.title('Validation Accuracy Comparison of CNN Models')
plt.xlabel('Epochs')
plt.ylabel('Validation Accuracy')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""# Comparison ***Table***"""

# Print final test accuracies
print(f"EfficientNetB0 Test Accuracy: {model_efficient.evaluate(test_gen)[1]:.4f}")
print(f"DenseNet121 Test Accuracy: {model_densenet.evaluate(test_gen)[1]:.4f}")
print(f"Xception Test Accuracy:     {model_xception.evaluate(test_gen)[1]:.4f}")

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt

# Load Xception model
model = load_model("/content/xception_pneumonia_model.h5")

# Load and preprocess image
img_path = "/content/text image noo.jpeg"
img = image.load_img(img_path, target_size=(150, 150))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

# Show input image
plt.imshow(img)
plt.axis('off')
plt.title("Chest X-Ray Input")
plt.show()

# Predict
prediction = model.predict(img_array)
confidence = float(prediction[0][0]) * 100

# Output result
if confidence > 50:
    print(f"⚠️ Pneumonia Detected with {confidence:.2f}% confidence.")
else:
    print(f"✅ Normal (No Pneumonia) with {100 - confidence:.2f}% confidence.")

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt

# Load Xception model
model = load_model("/content/xception_pneumonia_model.h5")

# Load and preprocess image
img_path = "/content/text image yes.jpg"
img = image.load_img(img_path, target_size=(150, 150))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

# Show input image
plt.imshow(img)
plt.axis('off')
plt.title("Chest X-Ray Input")
plt.show()

# Predict
prediction = model.predict(img_array)
confidence = float(prediction[0][0]) * 100

# Output result
if confidence > 50:
    print(f"⚠️ Pneumonia Detected with {confidence:.2f}% confidence.")
else:
    print(f"✅ Normal (No Pneumonia) with {100 - confidence:.2f}% confidence.")

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt

# Load Xception model
model = load_model("/content/efficientnetb0_pneumonia_model.h5")

# Load and preprocess image
img_path = "/content/text 11"
img = image.load_img(img_path, target_size=(150, 150))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

# Show input image
plt.imshow(img)
plt.axis('off')
plt.title("Chest X-Ray Input")
plt.show()

# Predict
prediction = model.predict(img_array)
confidence = float(prediction[0][0]) * 100

# Output result
if confidence > 50:
    print(f"⚠️ Pneumonia Detected with {confidence:.2f}% confidence.")
else:
    print(f"✅ Normal (No Pneumonia) with {100 - confidence:.2f}% confidence.")